Google Summer of Code Goal List

================== Day by Day Goals ==========================

- 6/22 (Monday)
	[x] Attempt to create networked game, writeup findings
	[-] Attempt to query APIs, use internet data, writeup findings
	[x] Read over server source code
	[x] Read over client source code
- 6/23 (Tuesday)
	[x] Complete call w/ Shiffman 10AM
	[x] Clone source code, get it so I can edit server.java
	[x] Edit server.java such that I can access client lists
	[x] Recompile Server.java so that I can use the new / modified functions in Processing
- 6/24 (Wednesday)
	[x] Use the new functions in the fishy game
	[x] Update numClients number when someone disconnects
	[x] Get client to notify server that it disconnects
	[x] Have server include a distinction between connection/disconnection events
	[x] Build that distinction into fishy game
	[x] Intersection detection (game logic)
	[x] Address individual clients when they have lost the game
	[x] Address the other individual clients and tell them to get bigger
	[x] Simple tutorial using the new functions / non broadcast tutorial
- 6/24 (Thursday)
	[x] Debug fish game a bit
	[x] Try to figure out where the screen flickers are coming from - is that the server library, or my sketch that I'm writing?
	[x] Read over pixels processing library
	[x] Read over the UDP processing library
	[-] Sketch out plan of attack for audio streaming
- 6/29 (Monday)
	[x] Respond to emails
	[x] Fix variable names in work so far
	[x] Play with ffmpeg
- 6/30 (Tuesday)
	[x] Get the damn thing to compile
	[x] Set up development enviroment
	[x] Delete the damn submodules and clean up git
- 8/10 (Monday)
	[] Get Email client going
	[] Summerize problem for Andres, send email
	[] Weekly update Dan
	[] Read over Andres code to fix linking error

[] Compile GStreamer C Code
[] Run GStreamer UDP sink in C
[] Transmit UDP audio
[] Transmit UDP video
[] Link in Java JNI with wrappers
[] Call gst-launch from java
[] Transmit UDP audio/video in Java
[] Link in with processing

GStreamer for combined audio and video streams? Use built-in UDP sinks, or write my own...
gsvideo.sourceforge.net
gstreamer-java github
gspipeline udp 
libvlc

gcc -I "C:\gstreamer-sdk\0.10\x86_64\include\gstreamer-0.10" -I"C:\gstreamer-sdk\0.10\x86_64\include\glib-2.0" -I "C:\gstreamer-sdk\0.10\x86_64\lib\glib-2.0\include" -I"C:\gstreamer-sdk\0.10\x86_64\include\libxml2" -L "C:\gstreamer-sdk\0.10\x86_64\bin" -l "libgstreamer-0.10-0" basic-tutorial-1.c

OLD PATH: revert here if after 7/23/15 2:38 pm things go tits up

C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\iis express\PHP\v5.4;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x86;C:\Program Files (x86)\Intel\OpenCL SDK\2.0\bin\x64;C:\Program Files\Intel\WiFi\bin\;C:\Program Files\Common Files\Intel\WirelessCommon\;C:\Program Files\Diskeeper Corporation\ExpressCache\;C:\Program Files (x86)\Windows Live\Shared;C:\Users\Nick\AppData\Local\Android\android-sdk\tools;C:\Users\N;C:\Program Files\MySQL\MySQL Server 5.1\bin;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;C:\Program Files (x86)\Skype\Phone\;C:\Program Files (x86)\Muse;C:\cygwin64\home\Nick\libraries\apache-ant-1.9.5\bin;C:\gstreamer-sdk\0.10\x86_64\bin;C:\cygwin64\home\Nick\Processing GSoC\GSoC\videoStreaming\videoStreaming\lib;C:\cygwin64\home\Nick\Processing GSoC\GSoC\videoStreaming\videoStreaming\lib\windows64;C:\gstreamer\1.0\x86\bin;C:\Java\bin

TODO:
[] Increase carrying capacity of datagrams (better spliting, more compression)
[] Thread the server and receiver so it doesn't junk up the draw loop
[] Audio streaming
[] Delete unused plugins and files
[] Movie type is ambiguous when included in the broadcaster package

java -cp jna.jar:gstreamer-java.jar   org.gstreamer.example.PipelineLauncher "videotestsrc ! autovideosink"

TESTED WORKING AUDIO TRANSMISSION:
gst-launch-1.0 audiotestsrc freq=1000 ! mulawenc ! rtppcmupay ! udpsink host=127.0.0.1 port=5555
gst-launch-1.0 udpsrc port=5555 caps="application/x-rtp" ! queue ! rtppcmudepay ! mulawdec ! audioconvert ! autoaudiosink

TESTED WORKING VIDEO TRANSMISSION:

gst-launch-1.0 videotestsrc ! jpegenc ! rtpjpegpay ! udpsink host=127.0.0.1 port=5200
gst-launch-1.0 udpsrc port=5200 ! application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! autovideosink

C:\Users\Nick\Videos\Bad.mpg

gst-launch-1.0 filesrc location=C:\Users\Nick\Videos\Bad.mpg ! dvddemux name=demuxer demuxer. ! queue ! mpeg2dec ! sdlvideosink demuxer. ! queue ! mad ! audioconvert ! audioresample ! osssink 

DEMOS and TUTORIAL IDEAS:

Radio station
Skype
Live video commenting

LEARNING NEW LINUX COMMANDS!

Check swap space:
grep SwapTotal /proc/meminfo

Show where a package is installed: whereis gstreamer-1.0

I LOVE APT-GET
sudo apt-get install libgstreamer1.0-dev

To get a list of packages installed locally do this in your terminal:
dpkg --get-selections | grep -v deinstall

Usually in Ubuntu header files for some package (say something) are provided by the corresponding dev package (say something-dev or libsomething-dev). Unless the manual is Ubuntu specific, it will probably just say "Install the development files" or something like that

If there's a bunch of shit like "relocation 0 has invalid symbol index 11" it just doesn't have a main function

java -Djava.library.path=. gstJNI "videotestsrc ! autovideosink"

java -Djava.library.path=/usr/lib/x86_64-linux-gnu;/Desktop/GSoC/GSoC/JNI gstJNI "videotestsrc ! autovideosink"

Make macros:
The macro @  evaluates to the name of the current target.