Google Summer of Code Goal List

================== Day by Day Goals ==========================

- 6/22 (Monday)
	[x] Attempt to create networked game, writeup findings
	[-] Attempt to query APIs, use internet data, writeup findings
	[x] Read over server source code
	[x] Read over client source code
- 6/23 (Tuesday)
	[x] Complete call w/ Shiffman 10AM
	[x] Clone source code, get it so I can edit server.java
	[x] Edit server.java such that I can access client lists
	[x] Recompile Server.java so that I can use the new / modified functions in Processing
- 6/24 (Wednesday)
	[x] Use the new functions in the fishy game
	[x] Update numClients number when someone disconnects
	[x] Get client to notify server that it disconnects
	[x] Have server include a distinction between connection/disconnection events
	[x] Build that distinction into fishy game
	[x] Intersection detection (game logic)
	[x] Address individual clients when they have lost the game
	[x] Address the other individual clients and tell them to get bigger
	[x] Simple tutorial using the new functions / non broadcast tutorial
- 6/24 (Thursday)
	[x] Debug fish game a bit
	[x] Try to figure out where the screen flickers are coming from - is that the server library, or my sketch that I'm writing?
	[x] Read over pixels processing library
	[x] Read over the UDP processing library
	[-] Sketch out plan of attack for audio streaming
- 6/29 (Monday)
	[x] Respond to emails
	[x] Fix variable names in work so far
	[x] Play with ffmpeg
- 6/30 (Tuesday)
	[x] Get the damn thing to compile
	[x] Set up development enviroment
	[x] Delete the damn submodules and clean up git

[] Compile GStreamer C Code
[] Run GStreamer UDP sink in C
[] Transmit UDP audio
[] Transmit UDP video
[] Link in Java JNI with wrappers
[] Call gst-launch from java
[] Transmit UDP audio/video in Java
[] Link in with processing

GStreamer for combined audio and video streams? Use built-in UDP sinks, or write my own...
gsvideo.sourceforge.net
gstreamer-java github
gspipeline udp 
libvlc

gcc -I "C:\gstreamer-sdk\0.10\x86_64\include\gstreamer-0.10\gst" -L C:\gstreamer-sdk\0.10\x86_64\bin basic-tutorial-1.c

TODO:
[] Increase carrying capacity of datagrams (better spliting, more compression)
[] Thread the server and receiver so it doesn't junk up the draw loop
[] Audio streaming
[] Delete unused plugins and files
[] Movie type is ambiguous when included in the broadcaster package

java -cp jna.jar:gstreamer-java.jar   org.gstreamer.example.PipelineLauncher "videotestsrc ! autovideosink"

TESTED WORKING AUDIO TRANSMISSION:
gst-launch-1.0 audiotestsrc freq=1000 ! mulawenc ! rtppcmupay ! udpsink host=127.0.0.1 port=5555
gst-launch-1.0 udpsrc port=5555 caps="application/x-rtp" ! queue ! rtppcmudepay ! mulawdec ! audioconvert ! autoaudiosink

TESTED WORKING VIDEO TRANSMISSION:
gst-launch-1.0 videotestsrc ! jpegenc ! rtpjpegpay ! udpsink host=127.0.0.1 port=5200
gst-launch-1.0 udpsrc port=5200 ! application/x-rtp,encoding-name=JPEG,payload=26 ! rtpjpegdepay ! jpegdec ! autovideosink

C:\Users\Nick\Videos\Bad.mpg

gst-launch-1.0 filesrc location=C:\Users\Nick\Videos\Bad.mpg ! dvddemux name=demuxer demuxer. ! queue ! mpeg2dec ! sdlvideosink demuxer. ! queue ! mad ! audioconvert ! audioresample ! osssink 

DEMOS and TUTORIAL IDEAS:

Radio station
Skype
Live video commenting